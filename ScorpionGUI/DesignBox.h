#pragma once

//
// DesignBox control
//
//
// BUGS:
//	* ...
//
//
// TODO:
//	* ...
//

#include <string>

#include <SFML/Graphics.hpp>

struct SharedContext;

#include "GuiControl.h"

#include "Label.h"
#include "Button.h"
#include "EditBox.h"
#include "Shape.h"

class DesignBox : public GuiControl
{
public:
	enum class ResizeDirection { NA = -1, NW, N, NE, W, E, SW, S, SE };

	DesignBox(SharedContext& sharedContext, int id, std::string name, sf::Vector2f position);
	virtual ~DesignBox() {};

	void CheckEvent(sf::Event& event);

	void Render();

	void GiveFocus() {}
	void RemoveFocus() {}

private:
	SharedContext& sharedContext;
	sf::RenderWindow* renderWindow;

	sf::RectangleShape rectShape[8];

	sf::Vector2f position;
	sf::Vector2f size;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void Create();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	//	void SetGuiID(int id) { guiID = id; }
	int GetGuiID() { return guiID; }
private:
	int guiID;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	void SetGuiName(std::string name) { guiName = name; }
	std::string GetGuiName() { return guiName; }
private:
	std::string guiName;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	// Position
	sf::Vector2f GetPosition() { return position; }
	void SetPosition(sf::Vector2f position);
	// Size
	sf::Vector2f GetSize() { return size; }
	void SetSize(sf::Vector2f size);
	// FillColor
	sf::Color GetFillColor() { return rectShape[0].getFillColor(); }
	void SetFillColor(sf::Color color) { for (int i = 0; i < 8; i++) { rectShape[i].setFillColor(color); } }
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	bool isDragging;
private:
	int selectedBox = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	bool isGrabbing;
	ResizeDirection grabIndex = ResizeDirection::NA;
	float grabSize = 7.0f;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	void MouseCheckForGotFocus(int mouseX, int mouseY);
	void MouseCheckForGrabbing(int mouseX, int mouseY);
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	void AttachToControl(std::string name);
private:
	GuiControl* attachControl;
	GuiControlType attachControlType;
	sf::Vector2f attachPosition;
	sf::Vector2f attachSize;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Label* GetControlLabel();
	Button* GetControlButton();
	EditBox* GetControlEditBox();
	Shape* GetControlShape();
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};
